{"name": "test_close_selenium_pop_up[chrome]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <Pages.Selenium_4_Popup_Page.Selenium_4_Popup_Page object at 0x106c09550>, locator = 'Selenium4_popup_close_icon__XPATH'\n\n    def find_element(self, locator):\n        try:\n>           web_element = self.driver.find_element(self.get_locator_signature(locator), self.get_locator_values(\n                locator))\n\n../Selenium_Operations/Element_Operations.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ea53b31689c05674563fd040ce960467\")>, by = 'xpath', value = \"//i[@class='eicon-close']\"\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\n../venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:861: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ea53b31689c05674563fd040ce960467\")>, driver_command = 'findElement'\nparams = {'using': 'xpath', 'value': \"//i[@class='eicon-close']\"}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n../venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x106bbab90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...ff802303259 _pthread_start + 125\\\\n20  libsystem_pthread.dylib             0x00007ff8022fec7b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//i[@class='eicon-close']\"}\nE         (Session info: headless chrome=110.0.5481.100)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001004f3138 chromedriver + 4923704\nE       1   chromedriver                        0x000000010046b9d3 chromedriver + 4368851\nE       2   chromedriver                        0x00000001000b4787 chromedriver + 472967\nE       3   chromedriver                        0x00000001000f8ba3 chromedriver + 752547\nE       4   chromedriver                        0x00000001000f8df1 chromedriver + 753137\nE       5   chromedriver                        0x000000010013f734 chromedriver + 1042228\nE       6   chromedriver                        0x0000000100121fdd chromedriver + 921565\nE       7   chromedriver                        0x000000010013cc0f chromedriver + 1031183\nE       8   chromedriver                        0x0000000100121d23 chromedriver + 920867\nE       9   chromedriver                        0x00000001000e8a4b chromedriver + 686667\nE       10  chromedriver                        0x00000001000ea044 chromedriver + 692292\nE       11  chromedriver                        0x00000001004be8fe chromedriver + 4708606\nE       12  chromedriver                        0x00000001004c3e22 chromedriver + 4730402\nE       13  chromedriver                        0x00000001004cc6bf chromedriver + 4765375\nE       14  chromedriver                        0x00000001004c4e80 chromedriver + 4734592\nE       15  chromedriver                        0x0000000100495975 chromedriver + 4540789\nE       16  chromedriver                        0x00000001004e6e78 chromedriver + 4873848\nE       17  chromedriver                        0x00000001004e6ff5 chromedriver + 4874229\nE       18  chromedriver                        0x00000001004fb6de chromedriver + 4957918\nE       19  libsystem_pthread.dylib             0x00007ff802303259 _pthread_start + 125\nE       20  libsystem_pthread.dylib             0x00007ff8022fec7b thread_start + 15\n\n../venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:249: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Pages.Selenium_4_Popup_Page.Selenium_4_Popup_Page object at 0x106c09550>, locator = 'Selenium4_popup_close_icon__XPATH'\n\n    def click(self, locator):\n        flag = False\n        try:\n>           ele = self.find_element(locator)\n\n../Selenium_Operations/Element_Operations.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Pages.Selenium_4_Popup_Page.Selenium_4_Popup_Page object at 0x106c09550>, locator = 'Selenium4_popup_close_icon__XPATH'\n\n    def find_element(self, locator):\n        try:\n            web_element = self.driver.find_element(self.get_locator_signature(locator), self.get_locator_values(\n                locator))\n            self.highlight_element(web_element)\n            log.logger.info(f\"{web_element} in focus now\")\n            print(f\"{web_element} in focus now\")\n            return web_element\n        except:\n            print(traceback.print_exc())\n>           assert False\nE           AssertionError\n\n../Selenium_Operations/Element_Operations.py:35: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_Selenium_4_Popup.Test_Dummy_Registration object at 0x105cc9190>\n\n    @pytest.mark.regression\n    def test_close_selenium_pop_up(self):\n        Selenium4PopUpPage = Selenium_4_Popup_Page(self.driver)\n        log.logger.info(\"********** Test close selenium pop up started **********\")\n>       Selenium4PopUpPage.close_selenium_four_popup()\n\ntest_Selenium_4_Popup.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../Pages/Selenium_4_Popup_Page.py:12: in close_selenium_four_popup\n    self.click(\"Selenium4_popup_close_icon__XPATH\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Pages.Selenium_4_Popup_Page.Selenium_4_Popup_Page object at 0x106c09550>, locator = 'Selenium4_popup_close_icon__XPATH'\n\n    def click(self, locator):\n        flag = False\n        try:\n            ele = self.find_element(locator)\n            self.highlight_element(ele)\n            ele.click()\n            flag = True\n            log.logger.info(f\"{ele} clicked successfully\")\n            print(f\"{ele} clicked successfully\")\n        except:\n            print(traceback.print_exc())\n>           assert False\nE           AssertionError\n\n../Selenium_Operations/Element_Operations.py:63: AssertionError"}, "attachments": [{"name": "log", "source": "23a02748-42a6-43d8-a200-4f4ef1a9c2a4-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "e555e7b9-f903-43d4-b9ff-4c3f4d93b20e-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "b899a873-cfa5-41c5-84c9-7f2eaa3c1263-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_browser", "value": "'chrome'"}], "start": 1677410895459, "stop": 1677410915726, "uuid": "3a43d274-ad7e-4328-b8dc-5cbb323c45aa", "historyId": "feafb4f7959793d75ccd1c032a4d4750", "testCaseId": "6491358cd602f98946759804075d7663", "fullName": "Test_Cases_pytest.test_Selenium_4_Popup.Test_Dummy_Registration#test_close_selenium_pop_up", "labels": [{"name": "tag", "value": "regression"}, {"name": "tag", "value": "@pytest.mark.usefixtures('log_on_failure', 'get_browser')"}, {"name": "parentSuite", "value": "Test_Cases_pytest"}, {"name": "suite", "value": "test_Selenium_4_Popup"}, {"name": "subSuite", "value": "Test_Dummy_Registration"}, {"name": "host", "value": "192.168.1.4"}, {"name": "thread", "value": "54377-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Cases_pytest.test_Selenium_4_Popup"}]}