{"name": "test_doSignUp[chrome-Rahul-8927342.0-trainer@way2automation.com-India-Delhi-rahularora1985-lsajdfksf]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <Pages.Home_Page.Home_Page object at 0x7fd7d861ac10>\n\n    def perform_after_actionChains(self):\n        try:\n>           return self.actions.perform()\n\n../Selenium_Operations/Element_Operations.py:731: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.common.action_chains.ActionChains object at 0x7fd7d861acd0>\n\n    def perform(self):\n        \"\"\"\n        Performs all stored actions.\n        \"\"\"\n>       self.w3c_actions.perform()\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/common/action_chains.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.common.actions.action_builder.ActionBuilder object at 0x7fd7d861a8b0>\n\n    def perform(self) -> None:\n        enc = {\"actions\": []}\n        for device in self.devices:\n            encoded = device.encode()\n            if encoded[\"actions\"]:\n                enc[\"actions\"].append(encoded)\n                device.actions = []\n>       self.driver.execute(Command.W3C_ACTIONS, enc)\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/common/actions/action_builder.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8c15cf208eca65fe6aadb21ddd5ade02\")>, driver_command = 'actions'\nparams = {'actions': [{'actions': [{'duration': 250, 'origin': {'element-6066-11e4-a52e-4f735466cecf': '51d994f1-dc20-49e0-9d27...interType': 'mouse'}, 'type': 'pointer'}, {'actions': [{'duration': 0, 'type': 'pause'}], 'id': 'key', 'type': 'key'}]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd7d8606b80>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: [object HT...ff802303259 _pthread_start + 125\\\\n23  libsystem_pthread.dylib             0x00007ff8022fec7b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: [object HTMLSpanElement] has no size and location\nE         (Session info: headless chrome=109.0.5414.87)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001027fefa8 chromedriver + 4886440\nE       1   chromedriver                        0x000000010277c643 chromedriver + 4351555\nE       2   chromedriver                        0x00000001023cab27 chromedriver + 477991\nE       3   chromedriver                        0x00000001023cef78 chromedriver + 495480\nE       4   chromedriver                        0x00000001023cec46 chromedriver + 494662\nE       5   chromedriver                        0x00000001023cf04c chromedriver + 495692\nE       6   chromedriver                        0x00000001024178f2 chromedriver + 792818\nE       7   chromedriver                        0x0000000102416abc chromedriver + 789180\nE       8   chromedriver                        0x000000010245b054 chromedriver + 1069140\nE       9   chromedriver                        0x00000001024355d2 chromedriver + 914898\nE       10  chromedriver                        0x00000001024505fe chromedriver + 1025534\nE       11  chromedriver                        0x00000001024353a3 chromedriver + 914339\nE       12  chromedriver                        0x00000001023ff57f chromedriver + 693631\nE       13  chromedriver                        0x0000000102400b1e chromedriver + 699166\nE       14  chromedriver                        0x00000001027cbb9e chromedriver + 4676510\nE       15  chromedriver                        0x00000001027d091e chromedriver + 4696350\nE       16  chromedriver                        0x00000001027d819f chromedriver + 4727199\nE       17  chromedriver                        0x00000001027d181a chromedriver + 4700186\nE       18  chromedriver                        0x00000001027a4a62 chromedriver + 4516450\nE       19  chromedriver                        0x00000001027f08c8 chromedriver + 4827336\nE       20  chromedriver                        0x00000001027f0a45 chromedriver + 4827717\nE       21  chromedriver                        0x00000001028067ef chromedriver + 4917231\nE       22  libsystem_pthread.dylib             0x00007ff802303259 _pthread_start + 125\nE       23  libsystem_pthread.dylib             0x00007ff8022fec7b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:249: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Test_Dummy_Registration.Test_Dummy_Registration object at 0x7fd7d8623910>, name = 'Rahul', phoneNum = 8927342.0\nemail = 'trainer@way2automation.com', country = 'India', city = 'Delhi', username = 'rahularora1985', password = 'lsajdfksf'\n\n    @pytest.mark.parametrize(\"name, phoneNum, email, country, city, username, password\",\n                             dataProvider.get_data(\"LoginTest\"))\n    @pytest.mark.regression\n    def test_doSignUp(self, name, phoneNum, email, country, city, username, password):\n        Selenium4PopUpPage = Selenium_4_Popup_Page(self.driver)\n        home = Home_Page(self.driver)\n        dummy_reg = dummy_registration(self.driver)\n        log.logger.info(\"********** Test Do Sign up started **********\")\n        # Selenium4PopUpPage.close_selenium_four_popup()\n>       home.moving_to_Dummy_Registration_Page()\n\nTest_Dummy_Registration.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../Pages/Home_Page.py:12: in moving_to_Dummy_Registration_Page\n    self.move_to_element(\"resources__XPATH\").perform_after_actionChains()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Pages.Home_Page.Home_Page object at 0x7fd7d861ac10>\n\n    def perform_after_actionChains(self):\n        try:\n            return self.actions.perform()\n        except:\n            print(traceback.print_exc())\n>           assert False\nE           AssertionError\n\n../Selenium_Operations/Element_Operations.py:734: AssertionError"}, "attachments": [{"name": "log", "source": "3e69bed5-a79d-4246-9f35-c436d8e1a2cb-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "6cc18830-2063-4faa-9f94-7c7656467bab-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "3a1d9e2d-bf27-4f5e-8767-ea214bed1b91-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_browser", "value": "'chrome'"}, {"name": "name", "value": "'Rahul'"}, {"name": "phoneNum", "value": "8927342.0"}, {"name": "email", "value": "'trainer@way2automation.com'"}, {"name": "country", "value": "'India'"}, {"name": "city", "value": "'Delhi'"}, {"name": "username", "value": "'rahularora1985'"}, {"name": "password", "value": "'lsajdfksf'"}], "start": 1674736658537, "stop": 1674736668851, "uuid": "05b032d2-6907-4400-9960-5f38a2a0a9cb", "historyId": "2ac4472e4d6c5303770182ef615943e5", "testCaseId": "363cc57d513c89d066658b90fc8abf1f", "fullName": "Test_Cases_pytest.Test_Dummy_Registration.Test_Dummy_Registration#test_doSignUp", "labels": [{"name": "tag", "value": "regression"}, {"name": "tag", "value": "@pytest.mark.usefixtures('log_on_failure', 'get_browser')"}, {"name": "parentSuite", "value": "Test_Cases_pytest"}, {"name": "suite", "value": "Test_Dummy_Registration"}, {"name": "subSuite", "value": "Test_Dummy_Registration"}, {"name": "host", "value": "192.168.1.4"}, {"name": "thread", "value": "58100-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Cases_pytest.Test_Dummy_Registration"}]}